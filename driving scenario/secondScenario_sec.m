function [allData, scenario, sensor] = secondScenario_sec()
%secondScenario - Returns sensor detections
%    allData = secondScenario returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = secondScenario optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.11 (R2021b) and Automated Driving Toolbox 3.4 (R2021b).
% Generated on: 23-May-2022 21:26:00

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    % Generate detections for the sensor
    laneDetections = [];
    ptClouds = [];
    insMeas = [];
    [objectDetections, numObjects, isValidTime] = sensor(poses, time);
    objectDetections = objectDetections(1:numObjects);

    % Aggregate all detections into a structure for later use
    if isValidTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = drivingRadarDataGenerator('SensorIndex', 1, ...
    'UpdateRate', 100, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'HasNoise', false, ...
    'DetectionProbability', 1, ...
    'TargetReportFormat', 'Detections', ...
    'AzimuthResolution', 1, ...
    'HasOcclusion', false, ...
    'HasFalseAlarms', false, ...
    'RangeResolution', 0.5, ...
    'Profiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [0.08 0.07 0;
    100.01 0.03 0];
lanetypes = [laneType('Parking')
    laneType('Driving')
    laneType('Driving')
    laneType('Driving')
    laneType('Driving')
    laneType('Driving')
    laneType('Border')];
laneSpecification = lanespec(7, 'Type', lanetypes);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the barriers
barrierCenters = [0.29 12.77 0;
    99.92 12.95 0];
barrier(scenario, barrierCenters, ...
    'ClassID', 5, ...
    'Width', 0.61, ...
    'Height', 0.81, ...
    'Mesh', driving.scenario.jerseyBarrierMesh, 'PlotColor', [0.65 0.65 0.65], 'Name', 'Jersey Barrier');

barrierCenters = [0.48 -13.14 0;
    100.11 -12.96 0];
barrier(scenario, barrierCenters, ...
    'ClassID', 5, ...
    'Width', 0.61, ...
    'Height', 0.81, ...
    'Mesh', driving.scenario.jerseyBarrierMesh, 'PlotColor', [0.65 0.65 0.65], 'Name', 'Jersey Barrier1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [2.37043977620323 0.337461815749091 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [2.37043977620323 0.337461815749091 0;
    15.9 0.9 0;
    26.5 4 0;
    38.7 7 0;
    51 4.3 0;
    61.7 3.3 0;
    78.3 0 0;
    91 -0.1 0;
    95.52 -0.11 0.01];
speed = [30;30;30;30;30;30;30;30;30];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
bicycle = actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [26.4 -10.8 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle');
waypoints = [26.4 -10.8 0;
    59.87 -10.79 0.01];
speed = [5;5];
trajectory(bicycle, waypoints, speed);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [25.1 0.4 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [25.1 0.4 0;
    51.5 0.4 0];
speed = [20;20];
waittime = [0;0];
trajectory(truck, waypoints, speed, waittime);

pedestrian = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [30.4 -11.6 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian');
waypoints = [30.4 -11.6 0;
    41.26 -11.68 0.01];
speed = [1.5;1.5];
trajectory(pedestrian, waypoints, speed);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [53.5 -9.9 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian1');

vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [50.8 11.1 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [75.4 -7 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car2');
waypoints = [75.4 -7 0;
    0.1 -7.2 0];
speed = [5;30];
waittime = [0;0];
trajectory(car2, waypoints, speed, waittime);

car3 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [75 3.9 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [15 255 255] / 255, ...
    'Name', 'Car3');
waypoints = [75 3.9 0;
    95.4 3.78 0.01];
speed = [10;10];
waittime = [0;0];
trajectory(car3, waypoints, speed, waittime);

