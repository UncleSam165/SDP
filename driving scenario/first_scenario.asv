function [allData, scenario, sensor] = first_scenario()
%first_scenario - Returns sensor detections
%    allData = first_scenario returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = first_scenario optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.11 (R2021b) and Automated Driving Toolbox 3.4 (R2021b).
% Generated on: 09-Mar-2022 00:15:51

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;

% start the figures here
% chasePlot(egoVehicle);
close all;
hFigure = figure;
hFigure.Position(3) = 900;
% poistion [left bottom width height]
hPanel1 = uipanel(hFigure,'Units','Normalized','Position',[0 1/2 1/2 1/2],'Title','Scenario Plot');
hPanel2 = uipanel(hFigure,'Units','Normalized','Position',[0 0 1/2 1/2],'Title','Chase Plot');
hPanel3 = uipanel(hFigure,'Units','Normalized','Position',[1/2 1/2 1/2 1/2],'Title','Bird''s-Eye Plot');
hPanel4 = uipanel(hFigure,'Units','Normalized','Position',[1/2 0 1/2 1/2],'Title','Radar Periodogram');

hAxes1 = axes('Parent',hPanel1);
hAxes2 = axes('Parent',hPanel2);
hAxes3 = axes('Parent',hPanel3);
hAxes4 = axes('Parent',hPanel4);

% assign scenario plot to first axes and add indicators for ActorIDs 1 and 2
plot(scenario, 'Parent', hAxes1,'ActorIndicators',[1 2]);

% assign chase plot to second axes
chasePlot(egoVehicle, 'Parent', hAxes2);

% assign bird's-eye plot to third axes
egoCarBEP = birdsEyePlot('Parent',hAxes3,'XLimits',[-200 200],'YLimits',[-240 240]);
fastTrackPlotter = trackPlotter(egoCarBEP,'MarkerEdgeColor','red','DisplayName','target','VelocityScaling',.5);
egoTrackPlotter = trackPlotter(egoCarBEP,'MarkerEdgeColor','blue','DisplayName','ego','VelocityScaling',.5);
egoLanePlotter = laneBoundaryPlotter(egoCarBEP);
plotTrack(egoTrackPlotter, [0 0]);
egoOutlinePlotter = outlinePlotter(egoCarBEP);

% The third ploy regarding the bird's eye is not working correwctly check
% it later
% figure;

while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    % Generate detections for the sensor
    laneDetections = [];
    ptClouds = [];
    insMeas = [];
    [objectDetections, numObjects, isValidTime] = sensor(poses, time);
    objectDetections = objectDetections(1:numObjects);


    % Aggregate all detections into a structure for later use
    if isValidTime

        % Use the ojectdetections and other sensor data to create the channel
        % of the JRC radar then perform the detection
        distances = zeros(1,numObjects);
        speeds = zeros(1,numObjects);
        RCS =ones(1,numObjects).*10; % the RCS should be modified!!
        for i = 1:numObjects
            distances(i) = sqrt(objectDetections{i}.Measurement(1)^2 + objectDetections{i}.Measurement(2)^2);
            speeds(i) = sqrt(objectDetections{i}.Measurement(4)^2 + objectDetections{i}.Measurement(5)^2);
        end

        c = physconst('lightSpeed');
        fc = 5.9*10^9; % carrier frequency
        df = 125 * 10^3; %frequency spacing
        dt = 0.1 * 10^-6; % sampling interval
        fs = 1/dt; %sampling frequency (20 MHz)
        deltaT = 0.4 *10^-3; % Observation time (means we take measurement every deltaT time)
        NumberofTimeSlots = 64; % number of time frames
        NumberOfSubcarriers = 64;
        Nfftn = 1024;
        Nfftm = 1024;

        RadarChannel = Generate_radar_channel(distances,speeds,RCS,fc,df,deltaT,NumberofTimeSlots,NumberOfSubcarriers);
        shifted_per = Periodogram(RadarChannel,Nfftn,Nfftm,fc,deltaT,df);

        im = imagesc(linspace(((Nfftm/2-1)*c)/(2*fc*deltaT*Nfftm),-c/(4*fc*deltaT),Nfftm) , linspace(0,((Nfftn-1)*c)/(2*df*Nfftn),Nfftn) , shifted_per , 'Parent',hAxes4);
        colorbar(hAxes4);
        xlabel(hAxes4,'relative speed (m/s)');
        ylabel(hAxes4,'Distance (m)');
        set(hAxes4,'YDir','normal');


        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = drivingRadarDataGenerator('SensorIndex', 1, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-9.9 0.2 0;
    -6.5 0.8 0;
    29.7 2.1 0;
    60.4 0.1 0];
laneSpecification = lanespec(3, 'Width', 6);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-6.5 0.8 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-6.5 0.8 0;
    0.1 1.8 0;
    6.7 2.5 0;
    13 2.8 0;
    17.8 3.5 0;
    26.1 7.7 0;
    32.5 8.4 0;
    40.7 6.9 0;
    47.7 1.7 0;
    55.5 0.4 0;
    59.7 0.1 0];
speed = [10;20;20;10;5;10;10;10;10;10;10];
waittime = [0;0;0;0;0;0;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [26.1 2.6 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');

bicycle = actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [47.2 6.8 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle');
waypoints = [47.2 6.8 0;
    51.8 6.6 0;
    55 6.2 0;
    59.9 5.7 0];
speed = [2;2;2;2];
waittime = [0;0;0;0];
trajectory(bicycle, waypoints, speed, waittime);

function [periodo] = perform_detection